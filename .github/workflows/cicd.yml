name: CI/CD for Dockerized Flask App

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/flask-app
  PYTHON_VERSION: "3.11"

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; else pip install flask; fi
          pip install pytest
      - name: Run tests
        run: pytest -q

  build-and-publish:
    # Only publish on actual pushes to main, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} # Use a Docker Hub access token

      - name: Compute tags
        id: meta
        run: |
          SHORT_SHA=${GITHUB_SHA::7}
          echo "latest,${{ env.IMAGE_NAME }}:${SHORT_SHA}" | awk -v base="${{ env.IMAGE_NAME }}" 'BEGIN{FS=","} {print "tags=" base ":latest," base ":" ENVIRON["SHORT_SHA"]}' >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:latest,${{ env.IMAGE_NAME }}:${{ github.sha::7 }}

      - name: Image digest
        run: echo "Digest: ${{ steps.docker_build.outputs.digest }}"
